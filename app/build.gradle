apply plugin: 'com.android.application'

repositories {
    mavenLocal()
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'
    defaultConfig {
        applicationId 'com.vivus.readytrack'
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 2
        versionName '1.0.1'
    }
    signingConfigs {
        release {
            storeFile file("VivusRelease.jks")
            storePassword "111"
            keyAlias "vivus"
            keyPassword "111"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'AndroidManifest.xml'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:19.0.0'
    compile 'com.octo.android.robospice:robospice-retrofit:1.4.13'
    compile 'com.octo.android.robospice:robospice-ormlite:1.4.13'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1.3'
    compile 'com.squareup.retrofit:converter-jackson:1.6.1'
    compile 'de.keyboardsurfer.android.widget:crouton:1.8.5@aar'
    compile 'com.roomorama:caldroid:1.1.3'
}

buildscript {
    repositories {
        mavenCentral()
    }
}

def isStringEmpty(String string) {
    return string == null || string.isEmpty() || string.equals('null')
}

def getSdkDir() {
    def envValue = 'ANDROID_HOME'
    def sdkDir = System.getenv(envValue)
    def rootDir = project.rootDir
    def propertiesFileName = "local.properties"
    if (isStringEmpty(sdkDir)) {
        def localProperties = new File(rootDir, propertiesFileName)
        print 'ANDROID_HOME does not set: rootDir: ' + rootDir
        if (localProperties.exists()) {
            print 'try get SDK DIR from local.properties'
            Properties properties = new Properties()
            localProperties.withInputStream { instr ->
                properties.load(instr)
            }
            sdkDir = properties.getProperty('sdk.dir')
        }
    }
    if (isStringEmpty(sdkDir)) {
        assert new java.lang.IllegalArgumentException('sdk dir does not set. added export it to ' + envValue + " or add it to " + rootDir + "/" + propertiesFileName)
    }
    return sdkDir
}

task run(type: Exec, dependsOn: 'installDebug') {
    def adb = getSdkDir() + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', applicationId + '/' + applicationPakage + launcherActivity
}






